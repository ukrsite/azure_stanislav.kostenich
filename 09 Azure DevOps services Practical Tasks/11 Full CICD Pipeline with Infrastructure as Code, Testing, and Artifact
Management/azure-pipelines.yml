trigger:
  - main

pool:
  name: devLinux
  demands:
    - agent.name -equals myAgent

variables:
  - group: "Dev"
  - name: "RESOURCE_GROUP"
    value: "devWebApp" # Replace with your resource group name
  - name: SQL_ADMIN_PASSWORD
    value: "$(SqlAdminPassword)" # Add this variable in the Azure DevOps Library
  - name: MavenCacheFolder
    value: $(Pipeline.Workspace)/.m2/repository

stages:
  - stage: Build
    displayName: 'Build Stage'
    jobs:
      - job: Build
        displayName: 'Build Java Spring Boot Application'
        steps:
          # Install Java 17
          - script: |
              sudo apt update
              sudo apt install openjdk-17-jdk -y
            displayName: 'Install Java 17 on Linux'

          # Install Maven
          - script: |
              sudo apt update
              sudo apt install maven -y
            displayName: 'Install Maven on Linux'

          - script: mkdir -p $(MavenCacheFolder)
            displayName: 'Ensure Maven Cache Folder Exists'

          # Restore dependencies from Azure Artifacts
          - script: mvn install -DskipTests
            displayName: 'Restore Maven Dependencies'

          # Cache Maven dependencies
          - task: Cache@2
            inputs:
              key: 'maven | **/pom.xml'
              path: $(MavenCacheFolder)
              restoreKeys: |
                maven

          - script: ls -l $(MavenCacheFolder)
            displayName: 'List Maven Cache Directory'

          # Build with Maven
          - script: mvn clean package -DskipTests
            displayName: 'Build with Maven'

          - script: ls -l /home/azureuser/myagent/_work/4/s/target/
            displayName: 'List Target Directory Contents'

          # Run unit tests with Maven
          - script: mvn -Dtest=*ManufacturerTest test
            displayName: 'Run unit tests'

          - task: PublishTestResults@2
            displayName: "Publish Test Results"
            inputs:
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              testRunTitle: "Maven Test Run"
              mergeTestResults: true


          # Publish dependencies to Azure Artifacts
          - task: MavenAuthenticate@0
            inputs:
              artifactsFeeds: 'appliances-store'
          - script:
#              mvn --batch-mode org.apache.maven.plugins:maven-deploy-plugin:3.1.3:deploy \
#                -DaltDeploymentRepository=azure-artifacts::default::https://pkgs.dev.azure.com/StanislavKostenich0849/azuredevopsproject/_packaging/appliances-store/maven/v1
#              mvn deploy -DskipTests
            displayName: 'Publish Dependencies to Azure Artifacts'

          # Publish the JAR artifact
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)/target/Appliance-store-Spring-0.0.1-SNAPSHOT.jar'
              ArtifactName: 'drop'
              publishLocation: 'Container'

  - stage: DeployInfrastructure
    displayName: 'Deploy Infrastructure Stage'
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: DeployInfrastructure
        displayName: 'Deploy Infrastructure Job'
        steps:
          - checkout: self

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'devWebApp2025'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az login --service-principal -u $(client_id) -p $(client_secret) --tenant $(tenant_id)
                az account set --subscription $(subscription_id)

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'devWebApp2025'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az deployment group create \
                  --resource-group $(RESOURCE_GROUP) \
                  --template-file main.bicep \
                  --parameters sqlAdminPassword=$(SQL_ADMIN_PASSWORD)

  - stage: Deploy
    displayName: 'Deploy Stage'
    dependsOn: DeployInfrastructure
    condition: succeeded()
    jobs:
      - job: Deploy
        displayName: 'Deploy Job'
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(Pipeline.Workspace)'

          - script: ls -R $(Pipeline.Workspace)/drop
            displayName: 'List Downloaded Artifact'

          # Deploy JAR to Azure App Service (Linux-based)
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'devWebApp2025'
              appName: 'devWebApp2025'
              package: '$(Pipeline.Workspace)/drop/*.jar'
              runtimeStack: 'JAVA|17-java17'
              startupCommand: 'java -jar /home/site/wwwroot/*.jar'
